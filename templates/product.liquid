<!-- /templates/product.liquid -->
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

{% comment %}
  {{ resource.metafields.namespace.key }}
{% endcomment %}
{% assign background_image = product.images.last %}
{% assign large_image_index = product.images.length | minus:2 %}
{% assign large_image = product.images[large_image_index] %}
{% assign quantity_available = product.selected_or_first_available_variant.inventory_quantity %}

<div itemscope itemtype="http://schema.org/Product">
  <div class="product-hero-background" style="background-image: url({{ background_image | img_url: 'master' }})">
    <div class="hero-blur"></div>

    <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
    <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

    {% comment %}
      Create thumbnails if we have more than one product image
    {% endcomment %}
    {% if product.images.size > 1 %}
      <ul class="product-single__thumbnails grid-uniform" id="ProductThumbs">
        {% for image in product.images %}
          {% if image.position != forloop.length %}
            {% assign second_to_last = forloop.length | minus:1 %}
            {% if image.position != second_to_last %}
              <li class="grid__item one-quarter">
                <a href="{{ image.src | img_url: 'large' }}" class="product-single__thumbnail">
                  <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
                </a>
              </li>
            {% endif %}
          {% endif %}
        {% endfor %}
      </ul>
    {% endif %}

      <div class="wrapper">
        <div class="grid product-single">
          <div class="grid__item large--one-half text-center">
            <div class="product-single__photos" id="ProductPhoto">
              {% assign featured_image = product.selected_or_first_available_variant.featured_image | default: product.featured_image %}
              <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg">
            </div>
          </div>

          <div class="grid__item large--one-half product-info">

            <h1 itemprop="name">{{ product.title }}</h1>

            <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">

              {% comment %}
                Get first variant, or deep linked one
              {% endcomment %}
              {% assign variant = product.selected_or_first_available_variant %}

              <meta itemprop="priceCurrency" content="{{ shop.currency }}">

              <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

              {% comment %}
                ID addToCartForm is a selector for the ajaxify cart plugin
              {% endcomment %}
              <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm">

                {% comment %}
                  Add product variants as a dropdown.
                    - By default, each variant (or combination of variants) will display as its own <option>
                    - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

                  You can leverage jQuery to add a callback on page load and each time the select element changes:
                    - Include option_selection.js (as seen at the bottom of this file)
                    - This allows you to use JavaScript anytime the variant dropdown changes
                    - This also separates out your variant options (ie. size, color, etc.) to separate select elements

                  For more information on products with multiple options, visit:
                    - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
                {% endcomment %}
                <select name="id" id="productSelect" class="product-single__variants">
                  {% for variant in product.variants %}
                    {% if variant.available %}

                      {% comment %}
                        Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                      {% endcomment %}
                      <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

                    {% else %}
                      <option disabled="disabled">
                        {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                      </option>
                    {% endif %}
                  {% endfor %}
                </select>

                {% comment %}
                  Optionally show the 'compare at' or original price of the product.
                {% endcomment %}
                <div class="price-container">
                  {% if product.compare_at_price > product.price %}
                    <p id="ComparedPrice">
                      {{ product.compare_at_price | money }}
                    </p>
                  {% endif %}
                  <p id="ProductPrice" class="h2{% if product.compare_at_price > product.price %} on-sale{% endif %}" itemprop="price">
                    {{ product.price | money }}
                  </p>
                  <p id="QuantityAvailable">({{quantity_available}} left)</p>
                  {% comment %}<label for="Quantity" class="quantity-selector">{{ 'products.product.quantity' | t }}</label>{% endcomment %}
                  <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">
                </div>

                <div class="product-description rte" itemprop="description">
                  {{ product.description }}
                </div>

                <button type="submit" name="add" id="AddToCart" class="btn">
                  <span id="AddToCartText">{{ 'products.product.add_to_cart' | t }}</span>
                </button>
              </form>

            </div>

          </div>
        </div>
      </div>
  </div>


  {% comment %}<div class="grid product-sections">
    {{ product.description }}
  </div>{% endcomment %}

  <!-- About This Box -->
  <div class="wrapper">
    <div class="about-this-box grid">
      <div class="grid__item large--one-half about-this-box-description">
        <div class="zig-zag"></div>
        <h2>{{ product.metafields.about.header }}</h2>
        <p class="sub-header">{{ product.metafields.about.subtext }}</p>
        <p class="description">
          {{ product.metafields.about.block_1 }}
        </p>
        <blockquote>
          {{ product.metafields.about.block_2 }}
        </blockquote>
        <p class="description">
          {{ product.metafields.about.block_3 }}
        </p>
      </div>
      <div class="grid__item large--one-half about-this-box-image">
        <div class="vinyl-image" style="background-image: url({{ featured_image | img_url: 'large' }})">
          <div class="play-button-wrapper">
            <img src="{{ 'play-button.png' | asset_url }}" />
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Large Image -->
  <div class="large-product-image" style="background-image: url('{{ large_image | img_url: 'master' }}')">
    <div class="bottom-triangle"></div>
    <div class="product-quote-wrapper">
      <div class="product-quote">
        <h2>{{product.metafields.large-image.header}}</h2>
        <p>{{product.metafields.large-image.block}}</p>
      </div>
    </div>
    <div class="top-triangle"></div>
  </div>

  <!-- Syllabus -->
  <div class="wrapper">
    <div class="grid syllabus">
      <div class="grid__item large--one-half columns syllabus-description">
        <div class="zig-zag"></div>
        <h2>{{ product.metafields.tracks.header }}</h2>
          <p class="sub-header">{{ product.metafields.tracks.subtext }}</p>
          <p class="description">
            {{ product.metafields.tracks.block_1 }}
          </p>
          <p class="description">
            {{ product.metafields.tracks.block_2 }}
          </p>
          <p class="description">
            {{ product.metafields.tracks.block_3 }}
          </p>
        </div>
      <div class="grid__item large--one-half syllabus-lessons">
        {{ product.metafields.tracks.track_list }}
      </div>
    </div>
  </div>

  <!-- Ingredients -->
  <div class="wrapper">
    <div class="grid ingredients">
      <h1>The best things come in thin square packages.</h1>
        {% unless product.metafields.product_contents.item_1_image == blank %}
          <div class="ingredient grid__item large--one-half small--one-whole columns">
            <img src="{{ product.metafields.product_contents.item_1_image }}" />
            <h3>{{ product.metafields.product_contents.item_1 }}</h3>
            <p>{{ product.metafields.product_contents.item_1_description }}</p>
          </div>
        {% endunless %}
        {% unless product.metafields.product_contents.item_2_image == blank %}
          <div class="ingredient grid__item large--one-half small--one-whole columns">
            <img src="{{ product.metafields.product_contents.item_2_image }}" />
            <h3>{{ product.metafields.product_contents.item_2 }}</h3>
            <p>{{ product.metafields.product_contents.item_2_description }}</p>
          </div>
        {% endunless %}
        {% unless product.metafields.product_contents.item_3_image == blank %}
          <div class="ingredient grid__item large--one-half small--one-whole columns">
            <img src="{{ product.metafields.product_contents.item_3_image }}" />
            <h3>{{ product.metafields.product_contents.item_3 }}</h3>
            <p>{{ product.metafields.product_contents.item_3_description }}</p>
          </div>
        {% endunless %}
        {% unless product.metafields.product_contents.item_4_image == blank %}
          <div class="ingredient grid__item large--one-half small--one-whole columns">
            <img src="{{ product.metafields.product_contents.item_4_image }}" />
            <h3>{{ product.metafields.product_contents.item_4 }}</h3>
            <p>{{ product.metafields.product_contents.item_4_description }}</p>
          </div>
        {% endunless %}
    </div>
  </div>

  <div class="tweet-collection">
    <div class="wrapper">
      <div class="grid">
        <div id="tw-widget">
        </div>
      </div>
    </div>
  </div>


  <div class="wrapper bread">
    {% comment %}
      If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
      in the URL, we can show next/previous links to other products in the collection.
    {% endcomment %}
    {% if collection %}
      {% if collection.previous_product or collection.next_product %}
        <p>

        {% if collection.previous_product %}
          {% capture prev_url %}{{ collection.previous_product}}#content{% endcapture %}
          <span class="left">
            {{ 'products.general.previous_product_html' | t | link_to: prev_url }}
          </span>
        {% endif %}

        {% if collection.next_product %}
          {% capture next_url %}{{ collection.next_product}}#content{% endcapture %}
          <span class="right">
            {{ 'products.general.next_product_html' | t | link_to: next_url }}
          </span>
        {% endif %}

        </p>
      {% endif %}
    {% endif %}
    {% include 'breadcrumb' %}
  </div>

  <div id="soundcloud-widget">
    {{ product.metafields.soundcloud.widget }}
  </div>

  {% comment %}Reviews{% endcomment %}
  {% comment %}<div id="shopify-product-reviews" data-id="{{product.id}}">{{ product.metafields.spr.reviews }}</div>
  <span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span>{% endcomment %}

</div>

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}
{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
  var selectCallback = function(variant, selector) {
    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });
  };

  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: {{ product | json }},
      onVariantSelected: selectCallback,
      enableHistoryState: true
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });
</script>

<script>
  {% unless product.metafields.twitter.collection == blank %}
    $(function() {
      var config2 = {
        "id": '{{ product.metafields.twitter.collection }}',
        "domId": 'tw-widget',
        "maxTweets": 3,
        "enableLinks": true,
        "showUser": true,
        "showTime": true,
        "showInteraction": false,
        "lang": 'en'
      };
      twitterFetcher.fetch(config2);
    });
  {% endunless %}
</script>
